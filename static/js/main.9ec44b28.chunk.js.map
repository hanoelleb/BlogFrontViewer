{"version":3,"sources":["constants/routes.js","Blog.js","Page.js","App.js","serviceWorker.js","index.js","blog.module.css"],"names":["viewer","Blog","props","state","posts","waiting","fetch","real","then","response","json","data","setState","post_list","this","map","post","React","Component","BlogPost","toPost","to","ROUTES","_id","className","styles","blog","onClick","title","content","Page","getData","bind","comments","id","match","params","headers","blogLink","createHandler","CommentThread","closeForm","openForm","length","comment","index","key","author","handler","CommentForm","handleSubmit","handleChange","event","preventDefault","method","body","JSON","stringify","target","name","value","onSubmit","commentForm","type","placeholder","onChange","rows","cols","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9ec44b28.chunk.js","sourcesContent":["export const viewer = '/BlogFrontViewer';\nexport const post = '/BlogFrontViewer/post/:id';\n","import React from 'react';\nimport styles from './blog.module.css';\n\nimport { Redirect } from 'react-router-dom';\nimport * as ROUTES from './constants/routes';\n\nclass Blog extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.state = ({posts: [], waiting: true})\n    }\n\n    componentDidMount() {\n\tvar test = 'http://localhost:8080/';\n        var real = 'https://hanoelleb-blog-api.herokuapp.com/';\n        fetch(real + 'api/posts')\n            .then( response => response.json() )\n            .then( data => {\n                this.setState({posts: data.posts.post_list, waiting: false});\n            });\n    }\n\n    render(){\n        return(\n        <div>\n            <h2>Welcome!</h2>\n\t    { this.state.waiting ? <p>Loading...</p> : \n\t\tthis.state.posts.map( post => < BlogPost post={post} />)\n\t    }\n        </div>\n        )\n\n    }\n}\n\nclass BlogPost extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = ({toPost: false})\n    }\n\n    render() {\n\tif (this.state.toPost)\n            return <Redirect to={ ROUTES.viewer + '/post/' + this.props.post._id} />\n        return  (\n\t    <div className={styles.blog}>\n                <h2 onClick={ ()=>{this.setState({toPost: true})} }>\n\t\t    {this.props.post.title}\n                </h2>\n\t\t<p>{this.props.post.content}</p>\n            </div>\n\t)\n    }\n}\n\nexport default Blog;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as ROUTES from './constants/routes';\n\nimport styles from './blog.module.css';\n\nclass Page extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.getData = this.getData.bind(this);\n        this.state = ({waiting: true, post: {}, comments: []})\n    }\n\n    componentDidMount() {\n        const id = this.props.match.params.id;\n\t\n\tvar test = 'http://localhost:8080/';\n        var real = 'https://hanoelleb-blog-api.herokuapp.com/';\n        \n\tfetch(real + 'api/post/' + id, \n\t{\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then( response => response.json() )\n\t  .then( data => this.setState({ post: data.post,\n                    comments: data.comments,\n                    waiting: false})\n            );\n\n    }\n\n    getData() {\n        const id = this.props.match.params.id;\n\n        var test = 'http://localhost:8080/';\n        var real = 'https://hanoelleb-blog-api.herokuapp.com/';\n\n        fetch(real + 'api/post/' + id,\n        {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then( response => response.json() )\n          .then( data => this.setState({ post: data.post,\n                    comments: data.comments,\n                    waiting: false})\n            );\n    }\n\n    render() {\n\n        if (this.state.waiting)\n\t    return <h2>Loading...</h2>\n        else {\n        return  (\n            <div>\n\t\t<Link className={styles.blogLink} \n\t\t    to={ROUTES.viewer}>View all posts</Link>\n                <div className={styles.blog}>\n\t\t    <h2>{this.state.post.title}</h2>\n                    <p>{this.state.post.content}</p>\n\t        </div>\n                <CommentThread id={this.props.match.params.id} \n\t            createHandler={this.getData} \n\t\t    comments={this.state.comments}/>\n            </div>\n\t)\n\t}\n    }\n}\n\nclass CommentThread extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.closeForm = this.closeForm.bind(this);\n\tthis.createHandler = this.createHandler.bind(this);\n\tthis.state = ({openForm : false});\n    }\n\n    closeForm() {\n        this.setState({openForm: false});\n    }\n\n    createHandler() {\n\tthis.setState({openForm: false});\n        this.props.createHandler();\n    }\n\n    render() {\n        return (\n          <div>\n            <h2>Comments</h2>\n            <button onClick={ ()=>{this.setState({openForm: true})} }>\n\t\tPost Comment\n            </button>\n            <div className='comments'>\n            {this.props.comments.length > 0 ? \n                 this.props.comments.map( function(comment, index) { \n\t\t      return (\n\t\t\t<div className={styles.comment} key={index}>\n                          <h3>{comment.author}</h3>\n                          <p>{comment.content}</p>\n                        </div>)\n\t\t      })\n\t\t :\n\t\t <h3>No comments on this post</h3>\n            }\n            </div>\n\t    {this.state.openForm ? <CommentForm id={this.props.id} \n                 handler={this.closeForm} \n\t\t createHandler={this.createHandler}/> \n             : \n             null \n\t    }\n          </div>\n\t)\n    }\n}\n\nclass CommentForm extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.handleSubmit = this.handleSubmit.bind(this);\n\tthis.handleChange = this.handleChange.bind(this);\n        this.state = ({author: '', content: ''})\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n\tconst comment = {\n\t    author: this.state.author,\n            content: this.state.content\n\t}\n\n        var test = 'http://localhost:8080/';\n        var real = 'https://hanoelleb-blog-api.herokuapp.com/';\n        \n        fetch( real + 'api/post/' + this.props.id + '/comment', \n\t{\n            method: 'POST',\n\t    headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n\t    },\n\t    body: JSON.stringify(comment)\n\t}).then( response => response.json() )\n\t  .then( data => this.props.createHandler() )\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name] : event.target.value});\n    }\n\n    render() {\n        return (\n\t  <form onSubmit={this.handleSubmit} className={styles.commentForm}>\n              <button onClick={this.props.handler}>Cancel</button>\n              <input type='text' name='author' \n               placeholder='name/nickname'\n               value={this.state.name}\n               onChange={this.handleChange}>\n              </input>\n\n              <textarea type='text' name='content' rows='4' cols='40'\n               placeholder='Enter your comment.'\n               value={this.state.content} \n               onChange={this.handleChange}>\n              </textarea>\n\n              <input type='submit' value='Post comment'></input>\n          </form>\n\t)\n    }\n}\n\nexport default Page;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport * as ROUTES from './constants/routes';\n\nimport Blog from './Blog';\nimport Page from './Page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t  <Router>\n\t      <Route exact path={ROUTES.viewer}\n                  component={Blog} />\n              <Route exact path={ROUTES.post}\n                  component={Page} />\n\t  </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blog\":\"blog_blog__3JtYz\",\"blogLink\":\"blog_blogLink__1As47\",\"commentForm\":\"blog_commentForm__3Qo9Q\",\"comment\":\"blog_comment__bVhsj\"};"],"sourceRoot":""}